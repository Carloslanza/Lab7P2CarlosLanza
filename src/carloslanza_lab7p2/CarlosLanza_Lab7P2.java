package carloslanza_lab7p2;

import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class CarlosLanza_Lab7P2 extends javax.swing.JFrame {

    /**
     * Creates new form CarlosLanza_Lab7P2
     */
    public CarlosLanza_Lab7P2() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pp_arbol = new javax.swing.JPopupMenu();
        loadFile_ppItem = new javax.swing.JMenuItem();
        refreshTrees_ppItem = new javax.swing.JMenuItem();
        pp_tabla = new javax.swing.JPopupMenu();
        clearTable_ppItem = new javax.swing.JMenuItem();
        cmd_tf = new javax.swing.JTextField();
        btn_enter = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        file_jmenu = new javax.swing.JMenu();
        newFile_menuItem = new javax.swing.JMenuItem();
        importFile_menuItem = new javax.swing.JMenuItem();
        window_jmenu = new javax.swing.JMenu();
        clear_jmenu = new javax.swing.JMenu();
        clearCMD_menuItem = new javax.swing.JMenuItem();
        clearTable_menuItem = new javax.swing.JMenuItem();
        refreshTree_menuItem = new javax.swing.JMenuItem();
        help_jmenu = new javax.swing.JMenu();
        programStruc_menuItem = new javax.swing.JMenuItem();
        commands_menuItem = new javax.swing.JMenuItem();

        loadFile_ppItem.setText("Load File");
        pp_arbol.add(loadFile_ppItem);

        refreshTrees_ppItem.setText("Refresh Trees");
        pp_arbol.add(refreshTrees_ppItem);

        clearTable_ppItem.setText("Clear Table");
        pp_tabla.add(clearTable_ppItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btn_enter.setText("Enter");
        btn_enter.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_enterMouseClicked(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("root");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jTree1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTree1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTree1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "id", "name", "category", "price", "aisle", "bin"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);

        file_jmenu.setText("File");

        newFile_menuItem.setText("New File");
        newFile_menuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                newFile_menuItemMouseClicked(evt);
            }
        });
        file_jmenu.add(newFile_menuItem);

        importFile_menuItem.setText("Import File");
        importFile_menuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                importFile_menuItemMouseClicked(evt);
            }
        });
        file_jmenu.add(importFile_menuItem);

        jMenuBar1.add(file_jmenu);

        window_jmenu.setText("Window");

        clear_jmenu.setText("Clear");

        clearCMD_menuItem.setText("Clear Command Line");
        clearCMD_menuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearCMD_menuItemMouseClicked(evt);
            }
        });
        clear_jmenu.add(clearCMD_menuItem);

        clearTable_menuItem.setText("Clear Table");
        clearTable_menuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clearTable_menuItemMouseClicked(evt);
            }
        });
        clear_jmenu.add(clearTable_menuItem);

        window_jmenu.add(clear_jmenu);

        refreshTree_menuItem.setText("Refresh Tree");
        refreshTree_menuItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                refreshTree_menuItemMouseClicked(evt);
            }
        });
        window_jmenu.add(refreshTree_menuItem);

        jMenuBar1.add(window_jmenu);

        help_jmenu.setText("Help");

        programStruc_menuItem.setText("Program Structure");
        help_jmenu.add(programStruc_menuItem);

        commands_menuItem.setText("Commands");
        help_jmenu.add(commands_menuItem);

        jMenuBar1.add(help_jmenu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(cmd_tf, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btn_enter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btn_enter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(1, 1, 1))
                    .addComponent(cmd_tf, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1))
                .addGap(11, 11, 11))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_enterMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_enterMouseClicked
        String cmd = cmd_tf.getText();
        String[] comandos = cmd.split(" ");
        
        try {
            switch (comandos[0]) {
                case "./load":
                    cargarTabla(comandos[1]);
                    break;
                case "./create":
                    ingresarProductos(comandos[1]);
                    break;
                case "./clear":
                    limpiarTabla();
                    break;
                case "./refresh":
                    cargarArboles();
                    break;
                default: {
                    JOptionPane.showMessageDialog(null, "Comando inv√°lido");
                }
            }
        } catch(IOException e) {}
        
        cmd_tf.setText("");
    }//GEN-LAST:event_btn_enterMouseClicked

    private void importFile_menuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_importFile_menuItemMouseClicked
        String texto = JOptionPane.showInputDialog(null, "Ingrese el archivo a importar: ");
        try {
            cargarTabla(texto);
        } catch (IOException ex) {}
    }//GEN-LAST:event_importFile_menuItemMouseClicked

    private void jTree1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTree1MouseClicked
       if (evt.isMetaDown()) {
           pp_arbol.show(jTree1, evt.getX(), evt.getY());
       }
    }//GEN-LAST:event_jTree1MouseClicked

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        if (evt.isMetaDown()) {
            pp_tabla.show(jTable1, evt.getX(), evt.getY());
        }
    }//GEN-LAST:event_jTable1MouseClicked

    private void newFile_menuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_newFile_menuItemMouseClicked
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        if (model.getRowCount() > 0) {
           String nombre = JOptionPane.showInputDialog(null, "Ingrese el nombre del archivo: ");
           ingresarProductos(nombre);
        } else {
            JOptionPane.showMessageDialog(null, "¬°La tabla est√° vac√≠a!");
        }
    }//GEN-LAST:event_newFile_menuItemMouseClicked

    private void clearCMD_menuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearCMD_menuItemMouseClicked
        cmd_tf.setText("");
    }//GEN-LAST:event_clearCMD_menuItemMouseClicked

    private void clearTable_menuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clearTable_menuItemMouseClicked
        limpiarTabla();
    }//GEN-LAST:event_clearTable_menuItemMouseClicked

    private void refreshTree_menuItemMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_refreshTree_menuItemMouseClicked
        cargarArboles();
    }//GEN-LAST:event_refreshTree_menuItemMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CarlosLanza_Lab7P2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CarlosLanza_Lab7P2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CarlosLanza_Lab7P2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CarlosLanza_Lab7P2.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CarlosLanza_Lab7P2().setVisible(true);
            }
        });
    }
    
    private void cargarTabla(String file) throws IOException {
        adminProductos = new AdministrarProductos(file);
        adminProductos.cargarArchivo();
        
        ArrayList<Producto> productos = adminProductos.getProductos();
        
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        
        for (int i = 1; i < productos.size(); i++) {
            Producto producto = productos.get(i);
            Object[] rowData = {
                producto.getId(),
                producto.getName(),
                producto.getCategory(),
                producto.getPrice(),
                producto.getAisle(),
                producto.getBin()
            };
            model.addRow(rowData);
        }
        
        jTable1.setModel(model);
        
        csvs.add(adminProductos);
    }

    
    private void ingresarProductos(String nombre) {
        ArrayList<Producto> productos = new ArrayList<>();
        adminProductos = new AdministrarProductos(nombre);
        
        
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        
        for (int i = 0; i < model.getRowCount(); i++) {
            
        }
    }
    
    private void limpiarTabla() {
        DefaultTableModel model = (DefaultTableModel)jTable1.getModel();
        model.setRowCount(0);
        jTable1.setModel(model);
    }
    
    private void cargarArboles() {
        
    }
    
    public static boolean validarName(String name) {
        name = name.toUpperCase();
        for (int i = 0; i < name.length(); i++) {
            if (name.charAt(i) >= 65 && name.charAt(i) <= 90 || name.charAt(i) == 32) {
                return true;
            }
        }
        return false;
    }
    
    public static boolean validarCategory(int category) {
        return category >= 0 && category < 10;
    }
    
    public static boolean validarTresPosiciones(int aisle) {
        return aisle > 99 && aisle < 1000;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_enter;
    private javax.swing.JMenuItem clearCMD_menuItem;
    private javax.swing.JMenuItem clearTable_menuItem;
    private javax.swing.JMenuItem clearTable_ppItem;
    private javax.swing.JMenu clear_jmenu;
    private javax.swing.JTextField cmd_tf;
    private javax.swing.JMenuItem commands_menuItem;
    private javax.swing.JMenu file_jmenu;
    private javax.swing.JMenu help_jmenu;
    private javax.swing.JMenuItem importFile_menuItem;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTree jTree1;
    private javax.swing.JMenuItem loadFile_ppItem;
    private javax.swing.JMenuItem newFile_menuItem;
    private javax.swing.JPopupMenu pp_arbol;
    private javax.swing.JPopupMenu pp_tabla;
    private javax.swing.JMenuItem programStruc_menuItem;
    private javax.swing.JMenuItem refreshTree_menuItem;
    private javax.swing.JMenuItem refreshTrees_ppItem;
    private javax.swing.JMenu window_jmenu;
    // End of variables declaration//GEN-END:variables

    private static AdministrarProductos adminProductos = null;
    private static ArrayList<AdministrarProductos> csvs = new ArrayList<>();
}
